{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"byteorder","disambiguator":[10971378625194391501,3805376672262300035]},"crate_root":"/Users/Administrator 1/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.3.13/src","external_crates":[{"file_name":"/Users/Administrator 1/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.3.13/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[12329654065439537058,3550739589497625882]}},{"file_name":"/Users/Administrator 1/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.3.13/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[5254469484872463618,2165906312547455486]}},{"file_name":"/Users/Administrator 1/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.3.13/src/lib.rs","num":3,"id":{"name":"alloc","disambiguator":[9692161226043200273,2135960074163464875]}},{"file_name":"/Users/Administrator 1/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.3.13/src/lib.rs","num":4,"id":{"name":"std_unicode","disambiguator":[16508449057898425716,11664536216223969809]}},{"file_name":"/Users/Administrator 1/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.3.13/src/lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[11030021342399255137,16804896806181620672]}},{"file_name":"/Users/Administrator 1/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.3.13/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[2548563078902337634,16703717802139213511]}},{"file_name":"/Users/Administrator 1/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.3.13/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[14765865803890387513,15708657201163280511]}},{"file_name":"/Users/Administrator 1/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.3.13/src/lib.rs","num":8,"id":{"name":"compiler_builtins","disambiguator":[14164242581788635592,7243223273272250893]}},{"file_name":"/Users/Administrator 1/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.3.13/src/lib.rs","num":9,"id":{"name":"alloc_jemalloc","disambiguator":[389493277937974183,3213959380066655222]}},{"file_name":"/Users/Administrator 1/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.3.13/src/lib.rs","num":10,"id":{"name":"panic_unwind","disambiguator":[15687228465028545657,7995937746976264985]}}],"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":25325,"line_start":1,"line_end":723,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":50},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1362,"byte_end":1374,"line_start":46,"line_end":46,"column_start":15,"column_end":27},"name":"ReadBytesExt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":82},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1376,"byte_end":1389,"line_start":46,"line_end":46,"column_start":29,"column_end":42},"name":"WriteBytesExt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":188},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1391,"byte_end":1396,"line_start":46,"line_end":46,"column_start":44,"column_end":49},"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":30},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1398,"byte_end":1404,"line_start":46,"line_end":46,"column_start":51,"column_end":57},"name":"Result","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":25325,"line_start":1,"line_end":723,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/Administrator 1/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.3.13/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":18},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":146},{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":172}],"decl_id":null,"docs":"This crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.","sig":null,"attributes":[{"value":"crate_name = \"byteorder\"","span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1201,"byte_end":1229,"line_start":39,"line_end":39,"column_start":1,"column_end":29}},{"value":"deny(missing_docs)","span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1298,"byte_end":1320,"line_start":42,"line_end":42,"column_start":1,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":30},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,110,101,119,46,114,115],"byte_start":25473,"byte_end":25479,"line_start":9,"line_end":9,"column_start":10,"column_end":16},"name":"Result","qualname":"::new::Result","value":"result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" A short-hand for `result::Result<T, byteorder::Error>`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":105},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,110,101,119,46,114,115],"byte_start":25994,"byte_end":26007,"line_start":24,"line_end":24,"column_start":5,"column_end":18},"name":"UnexpectedEOF","qualname":"::new::Error::UnexpectedEOF","value":"Error::UnexpectedEOF","parent":{"krate":0,"index":188},"children":[],"decl_id":null,"docs":" An unexpected EOF.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":107},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,110,101,119,46,114,115],"byte_start":26078,"byte_end":26080,"line_start":26,"line_end":26,"column_start":5,"column_end":7},"name":"Io","qualname":"::new::Error::Io","value":"Error::Io(io::Error)","parent":{"krate":0,"index":188},"children":[],"decl_id":null,"docs":" Any underlying IO error that occurs while reading bytes.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":188},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,110,101,119,46,114,115],"byte_start":25805,"byte_end":25810,"line_start":19,"line_end":19,"column_start":10,"column_end":15},"name":"Error","qualname":"::new::Error","value":"Error::{UnexpectedEOF, Io}","parent":null,"children":[{"krate":0,"index":105},{"krate":0,"index":107}],"decl_id":null,"docs":" An error type for reading bytes.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":50},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,110,101,119,46,114,115],"byte_start":27795,"byte_end":27807,"line_start":86,"line_end":86,"column_start":11,"column_end":23},"name":"ReadBytesExt","qualname":"::new::ReadBytesExt","value":"ReadBytesExt: io::Read","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":72},{"krate":0,"index":74}],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,110,101,119,46,114,115],"byte_start":28044,"byte_end":28051,"line_start":92,"line_end":92,"column_start":8,"column_end":15},"name":"read_u8","qualname":"::new::ReadBytesExt::read_u8","value":"fn (&mut self) -> Result<u8>","parent":{"krate":0,"index":50},"children":[],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,110,101,119,46,114,115],"byte_start":28397,"byte_end":28404,"line_start":103,"line_end":103,"column_start":8,"column_end":15},"name":"read_i8","qualname":"::new::ReadBytesExt::read_i8","value":"fn (&mut self) -> Result<i8>","parent":{"krate":0,"index":50},"children":[],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,110,101,119,46,114,115],"byte_start":28625,"byte_end":28633,"line_start":111,"line_end":111,"column_start":8,"column_end":16},"name":"read_u16","qualname":"::new::ReadBytesExt::read_u16","value":"fn <T> (&mut self) -> Result<u16>","parent":{"krate":0,"index":50},"children":[],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,110,101,119,46,114,115],"byte_start":28871,"byte_end":28879,"line_start":119,"line_end":119,"column_start":8,"column_end":16},"name":"read_i16","qualname":"::new::ReadBytesExt::read_i16","value":"fn <T> (&mut self) -> Result<i16>","parent":{"krate":0,"index":50},"children":[],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,110,101,119,46,114,115],"byte_start":29120,"byte_end":29128,"line_start":127,"line_end":127,"column_start":8,"column_end":16},"name":"read_u32","qualname":"::new::ReadBytesExt::read_u32","value":"fn <T> (&mut self) -> Result<u32>","parent":{"krate":0,"index":50},"children":[],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,110,101,119,46,114,115],"byte_start":29366,"byte_end":29374,"line_start":135,"line_end":135,"column_start":8,"column_end":16},"name":"read_i32","qualname":"::new::ReadBytesExt::read_i32","value":"fn <T> (&mut self) -> Result<i32>","parent":{"krate":0,"index":50},"children":[],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,110,101,119,46,114,115],"byte_start":29615,"byte_end":29623,"line_start":143,"line_end":143,"column_start":8,"column_end":16},"name":"read_u64","qualname":"::new::ReadBytesExt::read_u64","value":"fn <T> (&mut self) -> Result<u64>","parent":{"krate":0,"index":50},"children":[],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,110,101,119,46,114,115],"byte_start":29861,"byte_end":29869,"line_start":151,"line_end":151,"column_start":8,"column_end":16},"name":"read_i64","qualname":"::new::ReadBytesExt::read_i64","value":"fn <T> (&mut self) -> Result<i64>","parent":{"krate":0,"index":50},"children":[],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,110,101,119,46,114,115],"byte_start":30111,"byte_end":30120,"line_start":159,"line_end":159,"column_start":8,"column_end":17},"name":"read_uint","qualname":"::new::ReadBytesExt::read_uint","value":"fn <T> (&mut self, nbytes: usize) -> Result<u64>","parent":{"krate":0,"index":50},"children":[],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,110,101,119,46,114,115],"byte_start":30403,"byte_end":30411,"line_start":167,"line_end":167,"column_start":8,"column_end":16},"name":"read_int","qualname":"::new::ReadBytesExt::read_int","value":"fn <T> (&mut self, nbytes: usize) -> Result<i64>","parent":{"krate":0,"index":50},"children":[],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,110,101,119,46,114,115],"byte_start":30735,"byte_end":30743,"line_start":176,"line_end":176,"column_start":8,"column_end":16},"name":"read_f32","qualname":"::new::ReadBytesExt::read_f32","value":"fn <T> (&mut self) -> Result<f32>","parent":{"krate":0,"index":50},"children":[],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,110,101,119,46,114,115],"byte_start":31024,"byte_end":31032,"line_start":185,"line_end":185,"column_start":8,"column_end":16},"name":"read_f64","qualname":"::new::ReadBytesExt::read_f64","value":"fn <T> (&mut self) -> Result<f64>","parent":{"krate":0,"index":50},"children":[],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":82},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,110,101,119,46,114,115],"byte_start":32491,"byte_end":32504,"line_start":231,"line_end":231,"column_start":11,"column_end":24},"name":"WriteBytesExt","qualname":"::new::WriteBytesExt","value":"WriteBytesExt: io::Write","parent":null,"children":[{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":102}],"decl_id":null,"docs":" Extends `Write` with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,110,101,119,46,114,115],"byte_start":32742,"byte_end":32750,"line_start":237,"line_end":237,"column_start":8,"column_end":16},"name":"write_u8","qualname":"::new::WriteBytesExt::write_u8","value":"fn (&mut self, n: u8) -> Result<()>","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" Extends `Write` with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,110,101,119,46,114,115],"byte_start":33043,"byte_end":33051,"line_start":246,"line_end":246,"column_start":8,"column_end":16},"name":"write_i8","qualname":"::new::WriteBytesExt::write_i8","value":"fn (&mut self, n: i8) -> Result<()>","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" Extends `Write` with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,110,101,119,46,114,115],"byte_start":33218,"byte_end":33227,"line_start":252,"line_end":252,"column_start":8,"column_end":17},"name":"write_u16","qualname":"::new::WriteBytesExt::write_u16","value":"fn <T> (&mut self, n: u16) -> Result<()>","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" Extends `Write` with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,110,101,119,46,114,115],"byte_start":33465,"byte_end":33474,"line_start":260,"line_end":260,"column_start":8,"column_end":17},"name":"write_i16","qualname":"::new::WriteBytesExt::write_i16","value":"fn <T> (&mut self, n: i16) -> Result<()>","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" Extends `Write` with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,110,101,119,46,114,115],"byte_start":33715,"byte_end":33724,"line_start":268,"line_end":268,"column_start":8,"column_end":17},"name":"write_u32","qualname":"::new::WriteBytesExt::write_u32","value":"fn <T> (&mut self, n: u32) -> Result<()>","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" Extends `Write` with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,110,101,119,46,114,115],"byte_start":33962,"byte_end":33971,"line_start":276,"line_end":276,"column_start":8,"column_end":17},"name":"write_i32","qualname":"::new::WriteBytesExt::write_i32","value":"fn <T> (&mut self, n: i32) -> Result<()>","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" Extends `Write` with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,110,101,119,46,114,115],"byte_start":34212,"byte_end":34221,"line_start":284,"line_end":284,"column_start":8,"column_end":17},"name":"write_u64","qualname":"::new::WriteBytesExt::write_u64","value":"fn <T> (&mut self, n: u64) -> Result<()>","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" Extends `Write` with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,110,101,119,46,114,115],"byte_start":34459,"byte_end":34468,"line_start":292,"line_end":292,"column_start":8,"column_end":17},"name":"write_i64","qualname":"::new::WriteBytesExt::write_i64","value":"fn <T> (&mut self, n: i64) -> Result<()>","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" Extends `Write` with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,110,101,119,46,114,115],"byte_start":34749,"byte_end":34758,"line_start":301,"line_end":301,"column_start":8,"column_end":17},"name":"write_f32","qualname":"::new::WriteBytesExt::write_f32","value":"fn <T> (&mut self, n: f32) -> Result<()>","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" Extends `Write` with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,110,101,119,46,114,115],"byte_start":35039,"byte_end":35048,"line_start":310,"line_end":310,"column_start":8,"column_end":17},"name":"write_f64","qualname":"::new::WriteBytesExt::write_f64","value":"fn <T> (&mut self, n: f64) -> Result<()>","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" Extends `Write` with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":108},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2474,"byte_end":2483,"line_start":86,"line_end":86,"column_start":11,"column_end":20},"name":"ByteOrder","qualname":"::ByteOrder","value":"ByteOrder","parent":null,"children":[{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":122},{"krate":0,"index":124},{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":144}],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2591,"byte_end":2599,"line_start":90,"line_end":90,"column_start":8,"column_end":16},"name":"read_u16","qualname":"::ByteOrder::read_u16","value":"fn (buf: &[u8]) -> u16","parent":{"krate":0,"index":108},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2726,"byte_end":2734,"line_start":95,"line_end":95,"column_start":8,"column_end":16},"name":"read_u32","qualname":"::ByteOrder::read_u32","value":"fn (buf: &[u8]) -> u32","parent":{"krate":0,"index":108},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2861,"byte_end":2869,"line_start":100,"line_end":100,"column_start":8,"column_end":16},"name":"read_u64","qualname":"::ByteOrder::read_u64","value":"fn (buf: &[u8]) -> u64","parent":{"krate":0,"index":108},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3041,"byte_end":3050,"line_start":106,"line_end":106,"column_start":8,"column_end":17},"name":"read_uint","qualname":"::ByteOrder::read_uint","value":"fn (buf: &[u8], nbytes: usize) -> u64","parent":{"krate":0,"index":108},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3195,"byte_end":3204,"line_start":111,"line_end":111,"column_start":8,"column_end":17},"name":"write_u16","qualname":"::ByteOrder::write_u16","value":"fn (buf: &mut [u8], n: u16) -> ()","parent":{"krate":0,"index":108},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3339,"byte_end":3348,"line_start":116,"line_end":116,"column_start":8,"column_end":17},"name":"write_u32","qualname":"::ByteOrder::write_u32","value":"fn (buf: &mut [u8], n: u32) -> ()","parent":{"krate":0,"index":108},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3483,"byte_end":3492,"line_start":121,"line_end":121,"column_start":8,"column_end":17},"name":"write_u64","qualname":"::ByteOrder::write_u64","value":"fn (buf: &mut [u8], n: u64) -> ()","parent":{"krate":0,"index":108},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3635,"byte_end":3643,"line_start":127,"line_end":127,"column_start":8,"column_end":16},"name":"read_i16","qualname":"::ByteOrder::read_i16","value":"fn (buf: &[u8]) -> i16","parent":{"krate":0,"index":108},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3823,"byte_end":3831,"line_start":135,"line_end":135,"column_start":8,"column_end":16},"name":"read_i32","qualname":"::ByteOrder::read_i32","value":"fn (buf: &[u8]) -> i32","parent":{"krate":0,"index":108},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4011,"byte_end":4019,"line_start":143,"line_end":143,"column_start":8,"column_end":16},"name":"read_i64","qualname":"::ByteOrder::read_i64","value":"fn (buf: &[u8]) -> i64","parent":{"krate":0,"index":108},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4244,"byte_end":4252,"line_start":152,"line_end":152,"column_start":8,"column_end":16},"name":"read_int","qualname":"::ByteOrder::read_int","value":"fn (buf: &[u8], nbytes: usize) -> i64","parent":{"krate":0,"index":108},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4494,"byte_end":4502,"line_start":160,"line_end":160,"column_start":8,"column_end":16},"name":"read_f32","qualname":"::ByteOrder::read_f32","value":"fn (buf: &[u8]) -> f32","parent":{"krate":0,"index":108},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4721,"byte_end":4729,"line_start":168,"line_end":168,"column_start":8,"column_end":16},"name":"read_f64","qualname":"::ByteOrder::read_f64","value":"fn (buf: &[u8]) -> f64","parent":{"krate":0,"index":108},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4927,"byte_end":4936,"line_start":176,"line_end":176,"column_start":8,"column_end":17},"name":"write_i16","qualname":"::ByteOrder::write_i16","value":"fn (buf: &mut [u8], n: i16) -> ()","parent":{"krate":0,"index":108},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5128,"byte_end":5137,"line_start":184,"line_end":184,"column_start":8,"column_end":17},"name":"write_i32","qualname":"::ByteOrder::write_i32","value":"fn (buf: &mut [u8], n: i32) -> ()","parent":{"krate":0,"index":108},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5329,"byte_end":5338,"line_start":192,"line_end":192,"column_start":8,"column_end":17},"name":"write_i64","qualname":"::ByteOrder::write_i64","value":"fn (buf: &mut [u8], n: i64) -> ()","parent":{"krate":0,"index":108},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5552,"byte_end":5561,"line_start":200,"line_end":200,"column_start":8,"column_end":17},"name":"write_f32","qualname":"::ByteOrder::write_f32","value":"fn (buf: &mut [u8], n: f32) -> ()","parent":{"krate":0,"index":108},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5790,"byte_end":5799,"line_start":208,"line_end":208,"column_start":8,"column_end":17},"name":"write_f64","qualname":"::ByteOrder::write_f64","value":"fn (buf: &mut [u8], n: f64) -> ()","parent":{"krate":0,"index":108},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":146},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6070,"byte_end":6079,"line_start":217,"line_end":217,"column_start":49,"column_end":58},"name":"BigEndian","qualname":"::BigEndian","value":"BigEndian::{}","parent":null,"children":[],"decl_id":null,"docs":" Defines big-endian serialization.","sig":null,"attributes":[{"value":"allow(missing_copy_implementations)","span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6022,"byte_end":6060,"line_start":217,"line_end":217,"column_start":1,"column_end":39}}]},{"kind":"Enum","id":{"krate":0,"index":148},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6268,"byte_end":6280,"line_start":223,"line_end":223,"column_start":49,"column_end":61},"name":"LittleEndian","qualname":"::LittleEndian","value":"LittleEndian::{}","parent":null,"children":[],"decl_id":null,"docs":" Defines little-endian serialization.","sig":null,"attributes":[{"value":"allow(missing_copy_implementations)","span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6220,"byte_end":6258,"line_start":223,"line_end":223,"column_start":1,"column_end":39}}]},{"kind":"Type","id":{"krate":0,"index":150},"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6470,"byte_end":6482,"line_start":230,"line_end":230,"column_start":10,"column_end":22},"name":"NativeEndian","qualname":"::NativeEndian","value":"LittleEndian","parent":null,"children":[],"decl_id":null,"docs":" Defines system native-endian serialization.","sig":null,"attributes":[{"value":"cfg(target_endian = \"little\")","span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6428,"byte_end":6460,"line_start":229,"line_end":229,"column_start":1,"column_end":33}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,110,101,119,46,114,115],"byte_start":26121,"byte_end":26126,"line_start":29,"line_end":29,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":34}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,110,101,119,46,114,115],"byte_start":26213,"byte_end":26218,"line_start":33,"line_end":33,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":38}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,110,101,119,46,114,115],"byte_start":26498,"byte_end":26503,"line_start":43,"line_end":43,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,110,101,119,46,114,115],"byte_start":26748,"byte_end":26753,"line_start":52,"line_end":52,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":46},{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,110,101,119,46,114,115],"byte_start":31317,"byte_end":31318,"line_start":194,"line_end":194,"column_start":45,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,110,101,119,46,114,115],"byte_start":35338,"byte_end":35339,"line_start":319,"line_end":319,"column_start":47,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8309,"byte_end":8318,"line_start":284,"line_end":284,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":158},{"krate":0,"index":160},{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":166},{"krate":0,"index":168},{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9116,"byte_end":9128,"line_start":321,"line_end":321,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":178},{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,110,101,119,46,114,115],"byte_start":26121,"byte_end":26126,"line_start":29,"line_end":29,"column_start":26,"column_end":31},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":188},"to":{"krate":2,"index":2650}},{"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,110,101,119,46,114,115],"byte_start":26213,"byte_end":26218,"line_start":33,"line_end":33,"column_start":26,"column_end":31},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":1,"index":3766},"to":{"krate":2,"index":2650}},{"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,110,101,119,46,114,115],"byte_start":26498,"byte_end":26503,"line_start":43,"line_end":43,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":188},"to":{"krate":2,"index":7600}},{"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,110,101,119,46,114,115],"byte_start":26748,"byte_end":26753,"line_start":52,"line_end":52,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":188},"to":{"krate":1,"index":2456}},{"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,110,101,119,46,114,115],"byte_start":27813,"byte_end":27817,"line_start":86,"line_end":86,"column_start":29,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":4282},"to":{"krate":0,"index":50}},{"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,110,101,119,46,114,115],"byte_start":31317,"byte_end":31318,"line_start":194,"line_end":194,"column_start":45,"column_end":46},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":65},"to":{"krate":0,"index":50}},{"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,110,101,119,46,114,115],"byte_start":32510,"byte_end":32515,"line_start":231,"line_end":231,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":4314},"to":{"krate":0,"index":82}},{"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,110,101,119,46,114,115],"byte_start":35338,"byte_end":35339,"line_start":319,"line_end":319,"column_start":47,"column_end":48},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":103},"to":{"krate":0,"index":82}},{"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8309,"byte_end":8318,"line_start":284,"line_end":284,"column_start":20,"column_end":29},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":146},"to":{"krate":0,"index":108}},{"span":{"file_name":[47,85,115,101,114,115,47,65,100,109,105,110,105,115,116,114,97,116,111,114,32,49,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,48,46,51,46,49,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9116,"byte_end":9128,"line_start":321,"line_end":321,"column_start":20,"column_end":32},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":148},"to":{"krate":0,"index":108}}]}